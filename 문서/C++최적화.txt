메모리는 워드 단위로 접근한다.
메모리 접근 속도는 cpu 명령어 수행 속도에 비해 매우 느리다.
메모리에는 여러 종류가 있으며 접근 속도에 따라 구분된다.
	L1/L2/L3캐시 메모리, 메인 메모리, 가상 메모리
	캐시는 사용한 순서에 따라 저장되며 이때 인접한 메모리까지 같이 저장하며, 오래된 정보 순으로 제거한다.
	즉 자주 사용하는 메모리일수록 캐시에 저장될 확률이 높고 연속된 메모리일 수록 접근 속도가 좋다 

캐시를 잘 사용하자.	
레지스터에 저장할 수 있도록 해주는 volatile명령어와 여러 스레드에서 메모리에 접근할 때 생기는 문제를 해결해주는 atomic	

cpu는 명령어를 수행할 때 여러 스트림으로 동시에 실행하며 이를 파이프라인이라고 한다.
cpu는 실행 속도 최적화를 위해 결과가 보장되는 한 명령어 순서를 코드와 다르게 바꿀 수 있다.
파이프라인 실행이 메모리 접근, 분기 예측 실패 등 이유로 멈출 수 있다.(새로운 명령어 파이프라인을 다시 만들때 까지 멈춘다.)
명령어 중 스레드간 동기화 명령어가 있다면 스트림간 동시성을 줄이게 된다.

if문 사용, 인 라인 함수가 아닌 함수 호출, 동시성 제어, 메모리 접근 등을 잘 사용하자.


성능은 반드시 측정해야합니다. 대부분의 성능 저하는 특정 코드에서 발생한다.
	테스트 가능한 상황을 만들고, 기록한다.
	코드 변경사항을 기록한다.
	실험 결과를 보관한다.
	
	하지만...기록이 많아지면 안 보는걸요...
	테스트 상황을 기록하는 연구노트 정도는 만들어 두자 